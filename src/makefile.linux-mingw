# Copyright (c) 2009-2010 Satoshi Nakamoto
# Distributed under the MIT/X11 software license, see the accompanying
# file COPYING or http://www.opensource.org/licenses/mit-license.php.

DEPSDIR:=/usr/i686-w64-mingw32

CC := i686-w64-mingw32-gcc
CXX := i686-w64-mingw32-g++

USE_UPNP:=0
USE_IPV6:=1

INCLUDEPATHS= \
			   -I"$(CURDIR)" \
			    -I"$(CURDIR)"/obj \
				 -I"$c:/deps/boost_1_55_0" \
				  -I"$c:/deps/boost_1_55_0/boost" \
				   -I"$c:/deps/boost_1_55_0/boost/algorithm/string/" \
				    -I"$c:/deps/boost_1_55_0/libs" \
					 -I"$c:/deps/boost_1_55_0/stage/lib" \
					  -I"$c:/deps/db-4.8.30.NC/build_unix" \
					   -I"$c:/deps/openssl-1.0.1g/include" \
					    -I"$c:/deps"

LIBPATHS= \
  -L"$(DEPSDIR)/home/ubuntu/staging" \
  -L"$(DEPSDIR)/db-4.8.30.NC/build_unix" \
  -L"$(DEPSDIR)/openssl-1.0.1g"


LIBS= \
  $(CURDIR)/leveldb/libleveldb.a $(CURDIR)/leveldb/libmemenv.a \
 -l boost_system-mt-s \
 -l boost_filesystem-mt-s \
 -l boost_program_options-mt-s \
 -l boost_thread_win32-mt-s \
 -l boost_chrono-mt-s \
 -l db_cxx \
 -l ssl \
 -l crypto


DEFS=-D_MT -DWIN32 -D_WINDOWS -DBOOST_THREAD_USE_LIB -DBOOST_SPIRIT_THREADSAFE
DEBUGFLAGS=-g
xCXXFLAGS=-O2 -msse2 -w -Wall -Wextra -Wformat -Wformat-security -Wno-unused-parameter $(DEBUGFLAGS) $(DEFS) $(INCLUDEPATHS) $(CXXFLAGS)
xLDFLAGS=-Wl,--dynamicbase -Wl,--nxcompat -Wl,--large-address-aware -static-libgcc -static-libstdc++ $(LDFLAGS)

ifndef USE_UPNP
	override USE_UPNP = -
endif
ifneq (${USE_UPNP}, -)
	LIBPATHS += -L"$(DEPSDIR)/miniupnpc"
	LIBS += -l miniupnpc -l iphlpapi
	DEFS += -DSTATICLIB -DUSE_UPNP=$(USE_UPNP)
endif

ifneq (${USE_IPV6}, -)
	DEFS += -DUSE_IPV6=$(USE_IPV6)
endif

LIBS += -l mingwthrd -l kernel32 -l user32 -l gdi32 -l comdlg32 -l winspool -l winmm -l shell32 -l comctl32 -l ole32 -l oleaut32 -l uuid -l rpcrt4 -l advapi32 -l ws2_32 -l mswsock -l shlwapi

# TODO: make the mingw builds smarter about dependencies, like the linux/osx builds are
HEADERS = $(wildcard *.h)

OBJS= \
    obj/alert.o \
    obj/version.o \
    obj/checkpoints.o \
    obj/netbase.o \
    obj/addrman.o \
    obj/crypter.o \
    obj/key.o \
    obj/db.o \
    obj/init.o \
    obj/irc.o \
    obj/keystore.o \
    obj/main.o \
    obj/miner.o \
    obj/net.o \
    obj/protocol.o \
    obj/bitcoinrpc.o \
    obj/rpcdump.o \
    obj/rpcnet.o \
    obj/rpcmining.o \
    obj/rpcwallet.o \
    obj/rpcblockchain.o \
    obj/rpcrawtransaction.o \
    obj/script.o \
    obj/sync.o \
    obj/util.o \
    obj/wallet.o \
    obj/walletdb.o \
    obj/noui.o \
    obj/kernel.o \
    obj/pbkdf2.o \
    obj/scrypt.o \
    obj/scrypt-x86.o \
    obj/scrypt-x86_64.o \
    obj/zerocoin/Accumulator.o \
    obj/zerocoin/AccumulatorProofOfKnowledge.o \
    obj/zerocoin/Coin.o \
    obj/zerocoin/CoinSpend.o \
    obj/zerocoin/Commitment.o \
    obj/zerocoin/ParamGeneration.o \
    obj/zerocoin/Params.o \
    obj/zerocoin/SerialNumberSignatureOfKnowledge.o \
    obj/zerocoin/SpendMetaData.o \
    obj/zerocoin/ZeroTest.o

ifdef USE_SSE2
DEFS += -DUSE_SSE2
OBJS_SSE2= obj/scrypt-sse2.o
OBJS += $(OBJS_SSE2)
endif

all: clamd.exe

DEFS += -I"$(CURDIR)/leveldb/include"
DEFS += -I"$(CURDIR)/leveldb/helpers"
leveldb/libleveldb.a:
	@echo "Building LevelDB ..." && cd leveldb && CC=$(CC) CXX=$(CXX) TARGET_OS=OS_WINDOWS_CROSSCOMPILE CXXFLAGS="-I$(INCLUDEPATHS)" LDFLAGS="-L$(LIBPATHS)" $(MAKE) libleveldb.a libmemenv.a && $(RANLIB) libleveldb.a && $(RANLIB) libmemenv.a && cd ..

obj/build.h: FORCE
	/bin/sh ../share/genbuild.sh obj/build.h
version.cpp: obj/build.h
DEFS += -DHAVE_BUILD_INFO

obj/%-sse2.o: %-sse2.cpp
	$(CXX) -c $(xCXXFLAGS) -msse2 -mstackrealign -o $@ $<

obj/%.o: %.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

obj/zerocoin/%.o: zerocoin/%.cpp $(HEADERS)
	$(CXX) -c $(CFLAGS) -o $@ $<

clamd.exe: $(OBJS:obj/%=obj/%)
	$(CXX) $(CFLAGS) $(LDFLAGS) -o $@ $(LIBPATHS) $^ $(LIBS) -lshlwapi
	$(STRIP) clamd.exe

obj/scrypt-x86.o: scrypt-x86.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

obj/scrypt-x86_64.o: scrypt-x86_64.S
	$(CXX) -c $(CFLAGS) -MMD -o $@ $<

clean:
	-rm -f obj/*.o
	-rm -f obj/zerocoin/*.o
	-rm -f clamd.exe
	-rm -f obj/build.h
	cd leveldb && TARGET_OS=OS_WINDOWS_CROSSCOMPILE $(MAKE) clean && cd ..

FORCE:
